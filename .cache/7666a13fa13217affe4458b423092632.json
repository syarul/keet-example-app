{"dependencies":[{"name":"./copy","loc":{"line":11,"column":19}},{"name":"./tag","loc":{"line":12,"column":18}}],"generated":{"js":"/** \r\n * Keet.js v2.2.5 Alpha release: https://github.com/syarul/keet\r\n * A solution to write clean interface for web application\r\n *\r\n * <<<<<<<<<<<<<<<<<<<<<<<<<<<<<< Keet.js >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\r\n *\r\n * Copyright 2018, Shahrul Nizam Selamat\r\n * Released under the MIT License.\r\n */\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar copy = require('./copy');\nvar tag = require('./tag');\n\nmodule.exports = Keet;\n\nfunction Keet(tagName, context) {\n  var ctx = this,\n      argv = [].slice.call(arguments),\n      context = argv.filter(function (c) {\n    return (typeof c === \"undefined\" ? \"undefined\" : _typeof(c)) === 'object';\n  })[0],\n      getId = function getId(id) {\n    return document.getElementById(id);\n  },\n      testEval = function testEval(ev) {\n    try {\n      return eval(ev);\n    } catch (e) {\n      return false;\n    }\n  },\n      genElement = function genElement(child) {\n    var tempDiv = document.createElement('div');\n    var cloneChild = copy(child);\n    delete cloneChild.template;\n    delete cloneChild.tag;\n    delete cloneChild.style;\n    delete cloneChild.__ref__;\n    for (var attr in cloneChild) {\n      if (typeof cloneChild[attr] === 'function') {\n        delete cloneChild[attr];\n      }\n    }\n    var s = child.tag ? tag(child.tag, child.template ? child.template : '', cloneChild, child.style) : child.template;\n    tempDiv.innerHTML = s;\n    if (child.tag === 'input') {\n      if (child.checked) tempDiv.childNodes[0].checked = true;else tempDiv.childNodes[0].removeAttribute('checked');\n    }\n    process_event(tempDiv);\n    return tempDiv.childNodes[0];\n  },\n      parseStr = function parseStr(appObj, watch) {\n    if ((typeof appObj === \"undefined\" ? \"undefined\" : _typeof(appObj)) != 'object') throw new Error('instance is not an object');\n    var str = appObj.template,\n        childs = str.match(/{{([^{}]+)}}/g, '$1'),\n        regc,\n        child,\n        tempDiv,\n        elemArr = [];\n\n    if (childs) {\n\n      if (Array.isArray(appObj.list)) {\n        var arrProps = str.match(/{{([^{}]+)}}/g, '$1'),\n            tmplStr = '',\n            tmpl;\n        appObj.list.forEach(function (r) {\n          tmpl = str;\n          arrProps.forEach(function (s) {\n            var rep = s.replace(/{{([^{}]+)}}/g, '$1');\n            tmpl = tmpl.replace(/{{([^{}]+)}}/, r[rep]);\n          });\n          tempDiv = document.createElement('div');\n          tempDiv.innerHTML = tmpl;\n          process_event(tempDiv);\n          elemArr.push(tempDiv.childNodes[0]);\n        });\n        watcher3(appObj.list);\n      } else {\n        childs.forEach(function (c, index) {\n          regc = c.replace(/{{([^{}]+)}}/g, '$1');\n          // skip tags which not being declared yet\n          if (context) {\n            // check closure object\n            child = context[regc] ? context[regc] : false;\n          } else {\n            // check if current  objectr has prop\n            child = appObj[regc];\n            // check global object\n            if (!child) child = testEval(regc);\n          }\n          if (child && (typeof child === \"undefined\" ? \"undefined\" : _typeof(child)) === 'object') {\n            var newElement = genElement(child);\n            elemArr.push(newElement);\n          } else if (!child) {\n            tempDiv = document.createElement('div');\n            tempDiv.innerHTML = c;\n            process_event(tempDiv);\n            elemArr.push(tempDiv.childNodes[0]);\n          }\n\n          // watch object state\n          if (watch && child) {\n            watcher(child, index);\n          }\n        });\n      }\n    } else {\n      tempDiv = document.createElement('div');\n      tempDiv.innerHTML = str;\n      process_event(tempDiv);\n      elemArr.push(tempDiv.childNodes[0]);\n      watcher2(appObj);\n    }\n    return elemArr;\n  };\n\n  var process_event = function process_event(kNode) {\n    var listKnodeChild = [],\n        hask,\n        evtName,\n        evthandler,\n        handler,\n        isHandler,\n        argv,\n        i,\n        atts,\n        v,\n        rem = [];\n    loopChilds(listKnodeChild, kNode);\n    listKnodeChild.forEach(function (c) {\n      if (c.nodeType === 1 && c.hasAttributes()) {\n        var next = function next() {\n          atts = c.attributes;\n          if (i < atts.length) {\n            hask = /^k-/.test(atts[i].nodeName);\n            if (hask) {\n              evtName = atts[i].nodeName.split('-')[1];\n              evthandler = atts[i].nodeValue;\n              handler = evthandler.split('(');\n              isHandler = testEval(ctx.base[handler[0]]);\n              if (typeof isHandler === 'function') {\n                rem.push(atts[i].nodeName);\n                argv = [];\n                v = handler[1].slice(0, -1).split(',').filter(function (f) {\n                  return f != '';\n                });\n                if (v.length) v.forEach(function (v) {\n                  argv.push(v);\n                });\n\n                c.addEventListener(evtName, isHandler.bind.apply(isHandler, [c].concat(argv)), false);\n              }\n            }\n            i++;\n            next();\n          } else {\n            rem.map(function (f) {\n              c.removeAttribute(f);\n            });\n          }\n        };\n\n        i = 0;\n\n        next();\n      }\n    });\n    listKnodeChild = [];\n  };\n\n  this.vdom = function () {\n    var ele = getId(ctx.el);\n    if (ele) return ele;\n  };\n\n  this.flush = function (component) {\n    var ele = getId(component) || getId(ctx.el);\n    if (ele) ele.innerHTML = '';\n    return this;\n  };\n\n  /**\r\n  * render component to DOM\r\n  */\n\n  this.render = function () {\n    var ele = getId(ctx.el);\n    if (!ele) {\n      // throw new Error('cannot find DOM with id: '+ctx.el+' skip rendering..')\n      console.warn('cannot find DOM with id: ' + ctx.el + ' skip rendering..');\n    }\n    if (context) ctx.base = context;\n    var elArr = parseStr(ctx.base, true);\n    for (var i = 0; i < elArr.length; i++) {\n      ele.appendChild(elArr[i]);\n\n      if (i === elArr.length - 1) {\n        document.addEventListener('_loaded', window._loaded && typeof window._loaded === 'function' ? window._loaded(ctx.el) : null, false);\n      }\n    }\n  };\n\n  this.update = function (appObj) {\n    var ele = getId(ctx.el);\n    var elArr = parseStr(appObj, true);\n    ele.innerHTML = '';\n    for (var i = 0; i < elArr.length; i++) {\n      ele.appendChild(elArr[i]);\n      if (i === elArr.length - 1) {\n        document.addEventListener('_update', window._update && typeof window._update === 'function' ? window._update(ctx.el) : null, false);\n      }\n    }\n  };\n\n  var watcher = function watcher(instance, index) {\n    var obj, attr, attr2, ele, copyInstance, newElem;\n    for (attr in instance) {\n      instance.watch(attr, function (idx, o, n) {\n        for (attr2 in instance) {\n          instance.unwatch(attr2);\n        }\n        obj = {};\n        obj[idx] = n;\n        ele = getId(ctx.el);\n        Object.assign(instance, obj);\n        newElem = genElement(instance);\n        updateElem(ele.childNodes[index], newElem);\n        watcher(instance, index);\n      });\n    }\n  };\n\n  var watcher2 = function watcher2(instance) {\n    var obj, attr, attr2, ele, copyInstance, newElem;\n    for (attr in instance) {\n      instance.watch(attr, function (idx, o, n) {\n        for (attr2 in instance) {\n          instance.unwatch(attr2);\n        }\n        obj = {};\n        obj[idx] = n;\n        ele = getId(ctx.el);\n        Object.assign(instance, obj);\n        newElem = genElement(instance);\n        updateElem(ele, newElem, true);\n        watcher2(instance);\n      });\n    }\n  };\n\n  var watcher3 = function watcher3(instance) {\n    var pristineLen = copy(instance),\n        opsList,\n        op,\n        query;\n\n    opsList = function opsList() {\n      return ['push', 'pop', 'shift', 'unshift', 'splice', 'update'];\n    };\n\n    op = opsList();\n\n    query = function query(ops, argvs) {\n      op = [];\n      if (ops === 'push') arrProtoPush(argvs[0]);else if (ops === 'pop') arrProtoPop();else if (ops === 'shift') arrProtoShift();else if (ops === 'unshift') arrProtoUnShift.apply(null, argvs);else if (ops === 'splice') arrProtoSplice.apply(null, argvs);else arrProtoUpdate.apply(null, argvs);\n      op = opsList();\n      pristineLen = copy(instance);\n    };\n\n    op.forEach(function (f, i, r) {\n      instance[f] = function () {\n        var fargv = [].slice.call(arguments);\n        // if(!pristineLen[fargv[0]]) return false\n        if (f === 'update') fargv[1] = Object.assign(pristineLen[fargv[0]], fargv[1]);\n        Array.prototype[f].apply(this, fargv);\n        //propagate splice with single arguments\n        if (fargv.length === 1 && f === 'splice') fargv.push(pristineLen.length - fargv[0]);\n        query(f, fargv);\n      };\n    });\n  };\n\n  var arrProtoPush = function arrProtoPush(newObj) {\n    var ele = getId(ctx.el);\n    ele.appendChild(genTemplate(newObj));\n  };\n\n  var arrProtoPop = function arrProtoPop() {\n    var ele = getId(ctx.el);\n    ele.removeChild(ele.lastChild);\n  };\n\n  var arrProtoShift = function arrProtoShift() {\n    var ele = getId(ctx.el);\n    ele.removeChild(ele.firstChild);\n  };\n\n  var arrProtoUnShift = function arrProtoUnShift() {\n    var argv = [].slice.call(arguments);\n    var ele = getId(ctx.el);\n    var i = argv.length - 1;\n    while (i > -1) {\n      ele.insertBefore(genTemplate(argv[i]), ele.firstChild);\n      i--;\n    }\n  };\n\n  var arrProtoSplice = function arrProtoSplice() {\n    var ele = getId(ctx.el),\n        childLen,\n        len,\n        i,\n        j,\n        k,\n        c,\n        tempDivChildLen,\n        tempDiv,\n        argv = [].slice.call(arguments),\n        start = [].shift.call(argv),\n        count = [].shift.call(argv);\n    tempDiv = document.createElement('div');\n    if (argv.length) {\n      i = 0;\n      while (i < argv.length) {\n        tempDiv.appendChild(genTemplate(argv[i]));\n        i++;\n      }\n    }\n    childLen = copy(ele.childNodes.length);\n    tempDivChildLen = copy(tempDiv.childNodes.length);\n    if (count && count > 0) {\n      for (i = start; i < childLen + 1; i++) {\n        len = start + count;\n        if (i < len) {\n          ele.removeChild(ele.childNodes[start]);\n          if (i === len - 1 && tempDivChildLen > 0) {\n            c = start - 1;\n            for (j = start; j < tempDivChildLen + start; j++) {\n              insertAfter(tempDiv.childNodes[0], ele.childNodes[c], ele);\n              c++;\n            }\n          }\n        }\n      }\n    } else if (argv.length) {\n      c = start - 1;\n      for (k = start; k < tempDivChildLen + start; k++) {\n        insertAfter(tempDiv.childNodes[0], ele.childNodes[c], ele);\n        c++;\n      }\n    }\n  };\n\n  var arrProtoUpdate = function arrProtoUpdate() {\n    var argv = [].slice.call(arguments),\n        ele = getId(ctx.el),\n        index = [].shift.call(argv);\n\n    if (argv.length == 2 && typeof argv[1] == 'number') {\n      updateElem(ele.childNodes[index + argv[1]], genTemplate(argv[0]));\n    } else {\n      updateElem(ele.childNodes[index], genTemplate(argv[0]));\n    }\n  };\n\n  var genTemplate = function genTemplate(obj) {\n    var arrProps = ctx.base.template.match(/{{([^{}]+)}}/g, '$1'),\n        tmpl,\n        tempDiv,\n        ele;\n    tmpl = ctx.base.template;\n    arrProps.forEach(function (s) {\n      var rep = s.replace(/{{([^{}]+)}}/g, '$1');\n      tmpl = tmpl.replace(/{{([^{}]+)}}/, obj[rep]);\n    });\n    tempDiv = document.createElement('div');\n    tempDiv.innerHTML = tmpl;\n    process_event(tempDiv);\n    return tempDiv.childNodes[0];\n  };\n\n  var loopChilds = function loopChilds(arr, elem) {\n    for (var child = elem.firstChild; child !== null; child = child.nextSibling) {\n      arr.push(child);\n      if (child.hasChildNodes()) {\n        loopChilds(arr, child);\n      }\n    }\n  };\n\n  var insertAfter = function insertAfter(newNode, referenceNode, parentNode) {\n    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);\n  };\n\n  var nodeUpdate = function nodeUpdate(newNode, oldNode, watcher2) {\n    if (!newNode) return false;\n    var oAttr = newNode.attributes;\n    var output = {};\n    if (oAttr) {\n      for (var i = oAttr.length - 1; i >= 0; i--) {\n        output[oAttr[i].name] = oAttr[i].value;\n      }\n    }\n    for (var iAttr in output) {\n      if (oldNode.attributes[iAttr] && oldNode.attributes[iAttr].name === iAttr && oldNode.attributes[iAttr].value != output[iAttr]) {\n        oldNode.setAttribute(iAttr, output[iAttr]);\n      }\n    }\n    if (oldNode.textContent === '' && newNode.textContent) {\n      oldNode.textContent = newNode.textContent;\n    }\n    if (watcher2 && oldNode.textContent != newNode.textContent) {\n      oldNode.textContent = newNode.textContent;\n    }\n    if (oldNode.type == 'checkbox' && !oldNode.checked && newNode.checked) {\n      oldNode.checked = true;\n    }\n    if (oldNode.type == 'checkbox' && oldNode.checked && !newNode.checked) {\n      oldNode.checked = false;\n    }\n    output = {};\n  };\n\n  var nodeUpdateHTML = function nodeUpdateHTML(newNode, oldNode) {\n    if (!newNode) return false;\n    if (newNode.nodeValue !== oldNode.nodeValue) oldNode.nodeValue = newNode.nodeValue;\n  };\n\n  var updateElem = function updateElem(oldElem, newElem, watcher2) {\n    var oldArr = [],\n        newArr = [];\n    oldArr.push(oldElem);\n    newArr.push(newElem);\n    loopChilds(oldArr, oldElem);\n    loopChilds(newArr, newElem);\n    oldArr.forEach(function (ele, idx, arr) {\n      if (ele.nodeType === 1 && ele.hasAttributes()) {\n        nodeUpdate(newArr[idx], ele, watcher2);\n      } else if (ele.nodeType === 3) {\n        nodeUpdateHTML(newArr[idx], ele);\n      }\n      if (idx === arr.length - 1) {\n        oldArr.splice(0);\n        newArr.splice(0);\n      }\n    });\n  };\n\n  if (!Object.prototype.watch) {\n    Object.defineProperty(Object.prototype, 'watch', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: function value(prop, handler) {\n        var oldval = this[prop],\n            newval = oldval,\n            getter = function getter() {\n          return newval;\n        },\n            setter = function setter(val) {\n          oldval = newval;\n          return newval = handler.call(this, prop, oldval, val);\n        };\n        if (delete this[prop]) {\n          Object.defineProperty(this, prop, {\n            get: getter,\n            set: setter,\n            enumerable: true,\n            configurable: true\n          });\n        }\n      }\n    });\n  }\n\n  if (!Object.prototype.unwatch) {\n    Object.defineProperty(Object.prototype, 'unwatch', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: function value(prop) {\n        var val = this[prop];\n        delete this[prop];\n        this[prop] = val;\n      }\n    });\n  }\n\n  if (!Array.prototype.update) {\n    Object.defineProperty(Array.prototype, 'update', {\n      enumerable: false,\n      writable: true,\n      value: function value(index, _value) {\n        this[index] = _value;\n      }\n    });\n  }\n}\n\nKeet.prototype.link = function (id, value) {\n  var argv = [].slice.call(arguments);\n\n  this.el = argv[0];\n  if (argv.length === 2) {\n    this.base = argv[1];\n  }\n  this.render();\n  return this;\n};\n\nKeet.prototype.compose = function (instance) {\n  this.update(instance);\n  return this;\n};\n\nKeet.prototype.mount = function (instance) {\n  this.base = instance;\n  return this;\n};\n\nKeet.prototype.cluster = function () {\n  var args = [].slice.call(arguments);\n  args.map(function (fn) {\n    if (typeof fn === 'function') fn();\n  });\n  return this;\n};\n\nKeet.prototype.list = function () {\n  return this.base && this.base.list || [];\n};\n\nKeet.prototype.getBase = function (child, attribute, newProp) {\n  if (arguments.length > 2 && this.base) this.base[child][attribute] = newProp;else return this.base[child][attribute];\n};\n\nKeet.prototype.addClass = function (child, newClass) {\n  var self = this;\n  var b = this.getBase(child, 'class');\n\n  var isArr = function isArr() {\n    b.push(newClass);\n    self.getBase(child, 'class', b);\n  };\n\n  return Array.isArray(b) && isArr();\n};\n\nKeet.prototype.removeClass = function (child, oldClass) {\n  var self = this;\n  var b = this.getBase(child, 'class');\n\n  var hIdx = function hIdx(idx) {\n    b.splice(idx, 1);\n    self.getBase(child, 'class', b);\n  };\n\n  var isArr = function isArr() {\n    var idx = b.indexOf(oldClass);\n    if (~idx) hIdx(idx);\n  };\n\n  return Array.isArray(b) && isArr();\n};\n\nKeet.prototype.swapClass = function (child, condition, classesArray) {\n  var self = this;\n  var b = this.getBase(child, 'class');\n\n  if (condition) classesArray.reverse();\n\n  var hIdx = function hIdx(idx) {\n    b.splice(idx, 1, classesArray[1]);\n    self.getBase(child, 'class', b);\n  };\n\n  var isArr = function isArr() {\n    var idx = b.indexOf(classesArray[0]);\n    if (~idx) hIdx(idx);\n  };\n\n  return Array.isArray(b) && isArr();\n};\n\nKeet.prototype.swapAttr = function (child, condition, propertyArray, attribute) {\n  if (condition) propertyArray.reverse();\n  this.getBase(child, attribute, propertyArray[0]);\n};\n\nKeet.prototype.setAttr = function (child, attribute, newProperty) {\n  this.getBase(child, attribute, newProperty);\n};\n\nKeet.prototype.toggle = function (child, display) {\n  var styl = this.base[child].style;\n  Object.assign(styl, { display: display });\n  this.base[child].style = styl;\n};\n\nKeet.prototype.getDisplay = function (child) {\n  return this.base[child].style.display;\n};\n\nKeet.prototype.contentUpdate = function (child, content) {\n  this.base[child].template = content;\n};"},"hash":"d6066136bf51de9c6344b547a4d566a7"}